// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: estimator/api_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApiData struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator  string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Start    uint64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End      uint64 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	Time     uint64 `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	Distance uint64 `protobuf:"varint,6,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (m *ApiData) Reset()         { *m = ApiData{} }
func (m *ApiData) String() string { return proto.CompactTextString(m) }
func (*ApiData) ProtoMessage()    {}
func (*ApiData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1279a27d60ece22, []int{0}
}
func (m *ApiData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiData.Merge(m, src)
}
func (m *ApiData) XXX_Size() int {
	return m.Size()
}
func (m *ApiData) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiData.DiscardUnknown(m)
}

var xxx_messageInfo_ApiData proto.InternalMessageInfo

func (m *ApiData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ApiData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ApiData) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ApiData) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *ApiData) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ApiData) GetDistance() uint64 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func init() {
	proto.RegisterType((*ApiData)(nil), "testhellochain.estimator.ApiData")
}

func init() { proto.RegisterFile("estimator/api_data.proto", fileDescriptor_b1279a27d60ece22) }

var fileDescriptor_b1279a27d60ece22 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x31, 0x4e, 0xc3, 0x40,
	0x10, 0x45, 0xbd, 0x8e, 0x93, 0xc0, 0x14, 0x08, 0x8d, 0x28, 0x46, 0x14, 0x2b, 0x8b, 0x2a, 0x55,
	0x5c, 0xd0, 0xd1, 0x81, 0x38, 0x41, 0x4a, 0x1a, 0x34, 0x78, 0x47, 0xca, 0x48, 0x89, 0x6d, 0x79,
	0xa7, 0x80, 0x33, 0xd0, 0x70, 0x2c, 0xca, 0x94, 0x94, 0xc8, 0xbe, 0x08, 0xca, 0x22, 0x8c, 0xd2,
	0xfd, 0xff, 0xf4, 0x9a, 0x07, 0x24, 0xd1, 0x74, 0xcf, 0xd6, 0xf6, 0x15, 0x77, 0xfa, 0x1c, 0xd8,
	0x78, 0xdd, 0xf5, 0xad, 0xb5, 0x48, 0x26, 0xd1, 0xb6, 0xb2, 0xdb, 0xb5, 0xf5, 0x96, 0xb5, 0x59,
	0x4f, 0xe2, 0xcd, 0xbb, 0x83, 0xe5, 0x7d, 0xa7, 0x8f, 0x6c, 0x8c, 0x17, 0x90, 0x6b, 0x20, 0x57,
	0xba, 0x55, 0xb1, 0xc9, 0x35, 0x20, 0xc1, 0xb2, 0xee, 0xe5, 0xa8, 0x51, 0x5e, 0xba, 0xd5, 0xf9,
	0xe6, 0xef, 0xe2, 0x15, 0xcc, 0xa3, 0x71, 0x6f, 0x34, 0x4b, 0xf2, 0xef, 0xc1, 0x4b, 0x98, 0x49,
	0x13, 0xa8, 0x48, 0xec, 0x38, 0x11, 0xa1, 0x30, 0xdd, 0x0b, 0xcd, 0x13, 0x4a, 0x1b, 0xaf, 0xe1,
	0x2c, 0x68, 0x34, 0x6e, 0x6a, 0xa1, 0x45, 0xe2, 0xd3, 0x7f, 0xb8, 0xfb, 0x1c, 0xbc, 0x3b, 0x0c,
	0xde, 0x7d, 0x0f, 0xde, 0x7d, 0x8c, 0x3e, 0x3b, 0x8c, 0x3e, 0xfb, 0x1a, 0x7d, 0xf6, 0x54, 0x9e,
	0x16, 0x54, 0xaf, 0xd5, 0x7f, 0xac, 0xbd, 0x75, 0x12, 0x5f, 0x16, 0x29, 0xf5, 0xf6, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x83, 0xb8, 0xa8, 0xec, 0x06, 0x01, 0x00, 0x00,
}

func (m *ApiData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Distance != 0 {
		i = encodeVarintApiData(dAtA, i, uint64(m.Distance))
		i--
		dAtA[i] = 0x30
	}
	if m.Time != 0 {
		i = encodeVarintApiData(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x28
	}
	if m.End != 0 {
		i = encodeVarintApiData(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x20
	}
	if m.Start != 0 {
		i = encodeVarintApiData(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintApiData(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApiData(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApiData(dAtA []byte, offset int, v uint64) int {
	offset -= sovApiData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApiData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApiData(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovApiData(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovApiData(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovApiData(uint64(m.End))
	}
	if m.Time != 0 {
		n += 1 + sovApiData(uint64(m.Time))
	}
	if m.Distance != 0 {
		n += 1 + sovApiData(uint64(m.Distance))
	}
	return n
}

func sovApiData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApiData(x uint64) (n int) {
	return sovApiData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApiData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			m.Distance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Distance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApiData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApiData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApiData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApiData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApiData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApiData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApiData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApiData = fmt.Errorf("proto: unexpected end of group")
)
